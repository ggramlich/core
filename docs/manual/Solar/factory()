This method helps you create new object instance, auto-configuring it from
user-defined parameters and the Solar.config.php file.

In normal PHP, you must include a class file and then
instantiate it.

{{code: php
    // normal use
    require_once 'My/Class/File.php';
    $obj = new My_Class_File();
}}

With Solar, if you want to instantiate a new object,
you can use the [[Solar::factory()]] method instead of the
include-and-instantiate routine.

{{code: php
    // Solar object factory
    $obj = Solar::factory('My_Class_File');
}}

This method uses [[Solar::loadClass()]] internally to load the class file.

If the class conforms to the Solar standards for
[[Main::ConstructorParameters | constructor parameters]], the class
will be configured automatically with its corresponding values
in the [[Main::ConfigFile | config file]].  If you want to override
those values, you can pass a custom config array as the second
parameter:

{{code: php
    $options = array('zim' => 'gir', 'baz' => 'dib');
    $obj = Solar::factory('My_Class_File', $options);
}}

For this method to work, the class to be loaded must be in the
include_path and conform to the [[Main::NamingConventions | class naming conventions]].

