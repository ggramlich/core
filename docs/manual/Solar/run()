Use the run() method to include a file inside its own limited
scope.  This allows you to include files but not pollute the
current scope with the variables from the included file.

For example, say you have this "main" script:

{{code: php
    $var = 'foo';
    include 'helper.php';
    echo $var;
}}

If 'helper.php' sets the value of $var for itself, that value
will override the value from the main script, which can lead
to unexpected behavior.  If you want to make sure that
'helper.php' executes in its own separate scope, use the run()
method instead of [[php include]]:

{{code: php
    $var = 'foo';
    Solar::run('helper.php');
    echo $var;
}}

Now $var will remain the same before and after the inclusion
of helper.php (unless helper.php used [[php global]] to make
$var global).

As with [[php include]], you can accept return values from the
file you run:

{{code: php
    $result = Solar::run('helper.php');
}}

If the last line of helper.php is a return value, $result will
reflect that value.
     
