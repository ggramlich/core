In normal PHP, you would load a class file using include or
require, then attempt to instantiate the class.

<code type="php">
require_once "My/Example/Class.php";
$example = new My_Example_Class();
</code>

However, if My/Example/Class.php did not have the
My_Example_Class in it, PHP would throw an error; this can
often be a difficult error to track down.

The loadClass() method is the equivalent of the above pair of
steps, but adds a [[php class_exists()]] check to see if the
class was actually loaded from the file.  It won't attempt to
load the same class more than once.

For example:

<code type="php">
Solar::loadClass('My_Example_Class');
$example = new My_Example_Class();
</code>

If after calling loadClass() the 'My_Example_Class' still does
not exist, Solar throws an exception with a backtrace to let
you know the load failed and where it was called from.  This
makes it easy to track down failed class loads.

For this method to work, the class to be loaded must be in the
same directory as the Solar directory (typically the PEAR
library path) and conform to the [Main::NamingConventions class
naming conventions].

Note that when using Solar::factory(), you **do not** need to
use loadClass() first; Solar::factory() automatically calls
loadClass() to load the requested class file.

