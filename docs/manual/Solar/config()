Solar::config() safely reads a configuration group (or group-element) value from Solar::$config, optionally returning a default value if the group (or group-element) key does not exist.

++ Reading An Entire Group

If your Solar.config.php file has this entry ...

<code type="php">
$config['Example'] = array(
  'flag_a'  => 'these',
  'flag_b'  => 'those',
  'deeper'  => array(
    'deep_1' => 'foo',
    'deep_2' => 'bar',
  ),
);
</code>

... you can retrieve a copy of the entire 'Example' group like this:

<code type="php">
$example = Solar::config('Example');
</code>

If the 'Example' group does not exist, the config() method will return an empty array by default.  If you want to use a different default value when 'Example' does not exist, specify a `null` element and the customized default value:

<code type="php">
$default = Solar::object('Solar_Error');
$example = Solar::config('Example', null, $default);
</code>

Thus, `$example` will be a Solar_Error if 'Example' does not exist in the config file.


++ Reading A Single Group-Element

If your Solar.config.php file has this entry (identical to the above example)...

<code type="php">
$config['Example'] = array(
  'flag_a'  => 'these',
  'flag_b'  => 'those',
  'deeper'  => array(
    'deep_1' => 'foo',
    'deep_2' => 'bar',
  ),
);
</code>

... you can retrieve a copy of the 'flag_a' value like this:

<code type="php">
$flag_a = Solar::config('Example', 'flag_a');
</code>

If the 'Example' group does not exist, or if the 'flag_a' element does not exist in the 'Example' group, the config() method will return `null` value by default.  If you want to use a different default value, specify a that value as the third parameter:

<code type="php">
$flag_a = Solar::config('Example', 'flag_a', 'thars');
</code>

Thus, `$flag_a` will be `'thars'` if Solar::$config['Example']['flag_a'] does not exist.

++ Deep Reading

The config() method only allows you to read groups, or major group elements.  If you have this in your config file (again, identical to above) ...

<code type="php">
$config['Example'] = array(
  'flag_a'  => 'these',
  'flag_b'  => 'those',
  'deeper'  => array(
    'deep_1' => 'foo',
    'deep_2' => 'bar',
  ),
);
</code>

... you can retrieve the 'deeper' element,

<code type="php">
$deeper = Solar::config('Example', 'deeper');
</code>

... but you cannot retrieve the 'deep_1' sub-element.  In practice, this is not usually an issue.  Although you can always access Solar::$config if you need to, nesting often-used config file elements too deeply may be a signal that you need to re-think your design.