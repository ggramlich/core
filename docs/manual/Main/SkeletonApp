+ Minimal Application Skeleton

[[toc]]

++ Your Directory Location

Because Solar is geared toward distributing applications, you need to create your own "vendor" ("master" or "channel") directory where your classes will be stored.  This directory name will be the prefix on all your class names.  It can be anywhere in the file system.

<code type="bash">
$ mkdir /home/username/Vendor
</code>


++ Config and Front Controller

Edit Solar.config.php to recognize your vendor directory (along with the Solar directory) for page controllers.

<code type="bash">
$ cd /home/username/public_html
$ vi Solar.config.php
</code>

<code type="php">
$config = array();

// ...

$config['Solar_Controller_Front']['classes'] = array(
    'Solar_App',
    'Vendor_App',
);

// ...

return $config;
</code>

Also, make sure the front-controller bootstrap script has the Vendor directory in the include_path along with Solar itself.

<code type="bash">
$ vi /home/username/public_html/index.php
</code>

<code type="php">
// Path to PEAR libraries, where Solar is installed,
// **and** to the Vendor library.
set_include_path('/home/username/pear/php:/home/username/Vendor');

// Load and start Solar
// ...
</code>


++ App Directory Setup

In general, your vendor library should be structured like the Solar library.  Since we're doing an application skeleton, we'll need a an "App/" directory.

<code type="bash">
$ cd /home/username/Vendor
$ mkdir App
</code>

The Vendor directory now looks like this.

<code>
Vendor/
    App/
</code>

We'll call our application "Example"; it needs a directory, and subdirectories for its locale files, view files, etc.
 
<code type="bash">
$ cd App
$ touch Example.php
$ mkdir Example
$ mkdir Example/Helper
$ mkdir Example/Layout
$ mkdir Example/Locale
$ mkdir Example/View
</code>

The Vendor directory now looks like this.

<code>
Vendor/
    App/
        Example.php
        Example/
            Helper/
            Layout/
            Locale/
            View/
</code>

++ Page Controller and Action

Edit your Example.php page controller to make it extend [Solar_Controller_Page::HomePage Solar_Controller_Page]; give it a default action of 'index', a view-variable of 'output', and a method for the 'index' action.

<code type="bash">
$ vi Example.php
</code>

<code type="php">
Solar::loadClass('Solar_Controller_Page');
class Vendor_App_Example extends Solar_Controller_Page {

    protected $_action_default = 'index';
    
    public $output = '';
    
    public function actionIndex() {
        $this->output = "I am the vendor example";
    }
}
</code>

++ View

Now create the related view for the index action.

<code type="bash">
$ vi Example/View/index.php
</code>

<code type="html">
<html>
    <head>
        <title>Skeleton App</title>
    </head>
    <body>
        <p><?php echo $this->escape($this->output) ?>
    </body>
</html>
</code>


Now you should be able to browse to http://localhost/index.php/example/ and see some output.

++ Locale

Create a [Main::LocaleFile locale file] for US English in your `Locale/` directory:

<code type="bash">
$ vi Example/Locale/en_US.php
</code>

<code type="php">
return array(
    'TEXT_EXAMPLE' => 'I am a translated vendor example',
)
</code>

Now edit actionIndex() to use a locale key instead of a hard-coded string ...

<code type="bash">
$ vi Example.php
</code>

<code type="php">
    public function actionIndex() {
        $this->output = 'TEXT_EXAMPLE';
    }
</code>

... and edit your view file to translate that key with the [Solar_View_Helper_GetText::HomePage getText() helper].

<code type="bash">
$ vi Example/View/index.php
</code>

<code type="html">
<html>
    <head>
        <title>Skeleton App</title>
    </head>
    <body>
        <p><?php echo $this->getText($this->output) ?>
    </body>
</html>
</code>

Now when you browse to http://localhost/index.php/example/ you will see the translated output.  If you add other locale files, such as es_ES.php, and use Solar::setLocale() to change locale codes, those translations will appear instead.

++ Layout

Notice that our view script has more to it than just the "core" page content (the $this->output portion).  Normally you will want to be able to use the same header and footer portions across all actions in your applications.  Let's create a "layout" file to do that for us.

Create a basic layout file called "main.php":

<code type="bash">
$ vi Example/Layout/main.php
</code>

<code type="html">
<?php /* header portion */ ?>
<html>
    <head>
        <title>Skeleton App Layout</title>
    </head>
    <body>
        
        <h1>Skeleton Application</h1>
        
        <?php
            /* page controller output */
            echo $this->layout_content;
        ?>
        
<?php /* footer portion */ ?>        
    </body>
</html>
</code>

Now go back and edit your view script so that it only generates the bare minimum of output:

<code type="bash">
$ vi Example/View/index.php
</code>

<code type="html">
        <p><?php echo $this->getText($this->output) ?>
</code>

Finally, tell your page-controller class what layout to use by setting the $this->_layout property.

<code type="bash">
$ vi Example.php
</code>

<code type="php">
Solar::loadClass('Solar_Controller_Page');
class Vendor_App_Example extends Solar_Controller_Page {
    
    protected $_layout = 'main';
    
    protected $_action_default = 'index';
    
    public $output = '';
    
    public function actionIndex() {
        $this->output = 'TEXT_EXAMPLE';
    }
}
</code>

Now when you browse to http://localhost/index.php/example/ you will see the new page with a heading, and the translated output from the action.  All other views in your page-controller will use the same layout, unless you change the $this->_layout property to a different layout.  (To turn off layout use, just set $this->_layout to an empty value.)
