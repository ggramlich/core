[[toc]]

++ Why Localize?

Solar is built with worldwide distribution in mind; the end users of Solar applications may not speak your language.  As such, you should at least attempt to use the built-in localization facilities that Solar provides (c.f. the Solar::locale() method and the [Solar_Locale::HomePage Solar_Locale] class).

Adding localization to a form is very straightforward.  You will need to localize ...

* Form-feedback messages in Solar_Form::$feedback,

* Element 'label' and 'descr' values,

* If an element has 'options', the option labels

* Element validation messages, and

* The submission values of button elements.

We'll step through the GettingStarted example from a localization point of view.

++ Before We Begin

The first problem we run into with the Solar localization facility is that it expects the localization strings to be related to a class in some way.  While the GettingStarted example is fine for "standalone" forms, that example does nos not exist in relation to any other class.

For this localization example, we'll use the generic Solar localization strings (which come as part of the standard Solar distribution) in some places (noted by the calls to Solar::locale()) but we will also assume the existence of a Solar_Sql_Table class called $users; it has its own localization strings, noted by calls to $users->locale(), which will give us labels, descriptions, and so on.

++ The Localized Example Form

Now we'll recreate the GettingStarted form, using the Solar localization facility instead of hard-coded strings.

In particular, note that the 'op' button value, which tells the script what operation to perform, uses a localized string.  This means that when you are checking what operation to perform, you should check against a localized string, not a hard-coded one.  This means that (1) users of other languages will see the button in their own language, and (2) your controller will automatically map to the correct operation string for that language.

<code type="php">
require_once 'Solar.php';
Solar::start();

// create a hypthetical $users object for later
$users = Solar::factory('Example_Table_Users');

// the form config array indicates the <form> tag
// attributes and values; these will go into the
// $form->attribs public property.
$config = array(
    'action'  => '/test/index.php',
    'method'  => 'post',
    'enctype' => 'multipart/form-data',
);


// create a form
$form = Solar::factory('Solar_Form', $config);

// add elements to the form
$form->setElements(array(
    
    // the 'user_email' text input element
    'user_email' => array(
        
        // element type
        'type'  => 'text',
        
        // a localized label (custom from $users)
        'label' => $users->locale('LABEL_USER_EMAIL'),
        
        // a localized long description (custom from $users)
        'descr' => $users->locale('DESCR_USER_EMAIL'),
        
        // a localized validation message (custom from $users)
        'valid' => array(
            array('email', $users->locale('VALID_USER_EMAIL')),
        ),
    ),
    
    // the 'op' submit element
    'op' => array(
        
        // element type
        'type'  => 'submit',
        
        // a localized label (generic from Solar)
        'label' => Solar::locale('Solar', 'LABEL_OP'),
        
        // a localized operation value (generic from Solar)
        'value' => Solar::locale('Solar', 'OP_SAVE'),
        
    ),
);

// populate the form with user input
$form->populate();

// capture what operation the user wants to perform
$op = Solar::post('user_op');

// process a 'Save' operation.  Note that we check against
// the localized value of the operation, not a hard-coded
// string.
if ($op == Solar::locale('Solar', 'OP_SAVE')) {
    
    // validate the user input
    $isValid = $form->validate();
    
    if ($isValid) {
        $values = $form->values();
        $users->insert($values['user_email']);
    }
}
</code>