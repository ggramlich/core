This class helps you create a data structure designed to represent an XHTML form; automated data population, filtering, and validation are built-in.

While this class does not render the form for you (as that is the job of a view or presentation layer), it does allow you to build "hints" as to how the elements should be presented; you then pass the object instance into your view, which can take those "hints" any way it likes.  These "hints" are called the FormDescriptor array.

In addition, the class will draw in data from an array (typically $_POST), validate the newly-populated structure against filters and rules that you sets up, and set feedback messages based on which elements were valid and which were not.  In many ways, Solar_Form is a cousin to [http://pear.php.net/HTML_QuickForm HTML_QuickForm], but with all rendering removed.

You can see a full example use of Solar_Form [ExampleUses here].  Here's a quick example to whet your curiosity; note that we use a small bit of localization (although a real form would have [LocalizedForms everything localized]).

<code type="php">
require_once 'Solar.php';
Solar::start();

// build the form and its elements
$form = Solar::factory('Solar_Form');
$form->setElements(array(
    'user[handle]' => array(
        'type'     => 'text',
        'label'    => 'Your Username:',
        'require'  => true,
        'valid' => array(
            array('notBlank', 'Please enter a username.'),
            array('alnum', 'Please use only letters and numbers for your username.'),
        ),
    ),
    'user[email]'  => array(
        'type'     => 'text',
        'label'    => 'Your Email Address:',
        'require'  => true,
        'valid' => array(
            array('notBlank', 'Please enter an email address.'),
            array('email', 'Please use a valid email address.'),
        ),
    ),
    'op' => array(
        'type'     => 'submit',
        // use a localized button value
        'value'    => Solar::locale('Solar', 'OP_SAVE'),
    ),
));

// find what operation was requested
$op = Solar::post('op');

// handle operations based on the localized button values
if ($op == Solar::locale('Solar', 'OP_SAVE')) {
    
    // populate the form with submitted values
    $form->populate();
    
    // validate the user input
    $valid = $form->validate();
    
    // was it valid?
    if ($valid) {
        
        // yes, so get the values...
        $values = $form->values();
        $user = $values['user'];
        
        // ... and save $user to a database.
        // ...
        
        // now tell the user all is well.
        $form->feedback[] = 'Submission complete!';
        
    } else {
        
        // values were not valid
        $form->feedback[] = 'There were errors, please see below.';
        
    }
}

// get a template object, assign the form to it, and display.
$tpl = Solar::factory('Solar_Template');
$tpl->forminfo = $form;
$tpl->display('form_example.php');
</code>