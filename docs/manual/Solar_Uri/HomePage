This class helps you to create and manipulate URIs, including query
strings and path elements. It does so by splitting up the pieces of the
URI and allowing you modify them individually; you can then then fetch
them as a single URI string. This helps when building complex links,
such as in a paged navigation system.

> Note: For controller action URIs, use [[Solar_Uri_Action::HomePage | Solar_Uri_Action]] instead.  Likewise, for public resource URIs, use [[Solar_Uri_Public::HomePage | Solar_Uri_Public]] instead.

The following is a simple example. Say that the page address is
currently
`http://anonymous::guest@example.com/path/to/index.php/foo/bar?baz=dib#anchor`.
You can use Solar_Uri to parse this complex string very easily:

{{code: php
    require_once 'Solar.php';
    Solar::start();

    // create a URI object; this will automatically import the current
    // location, which is...
    // 
    // http://anonymous::guest@example.com/path/to/index.php/foo/bar?baz=dib#anchor
    $uri = Solar::factory('Solar_Uri');

    // now the $uri properties are ...
    // 
    // $uri->scheme   => 'http'
    // $uri->host     => 'example.com'
    // $uri->user     => 'anonymous'
    // $uri->pass     => 'guest'
    // $uri->path     => array('path', 'to', 'index.php', 'foo', 'bar')
    // $uri->query    => array('baz' => 'dib')
    // $uri->fragment => 'anchor'
}}

Now that we have imported the URI and had it parsed automatically, we
can modify the component parts, then fetch a new URI string.

{{code: php
    // change to 'https://'
    $uri->scheme = 'https';

    // remove the username and password
    $uri->user = '';
    $uri->pass = '';

    // change the value of 'baz' to 'zab'
    $uri->setQuery('baz', 'zab');

    // add a new query element called 'zim' with a value of 'gir'
    $uri->query['zim'] = 'gir';

    // reset the path to something else entirely
    $uri->setPath('/something/else/entirely.php');

    // add a path element
    $uri->path[] = 'another';

    // and fetch it to a string.
    $new_uri = $uri->fetch();

    // the $new_uri string is:
    // /something/else/entirely.php/another?baz=zab&zim=gir#anchor

    // wait, there's no scheme or host!
    // we need to fetch the "full" URI.
    $full_uri = $uri->fetch(true);

    // the $full_uri string is:
    // https://example.com/something/else/entirely.php/another?baz=zab&zim=gir#anchor
}}

As you can see, this class is quite powerful when it comes to URIs. For
more information, be sure to read about the various ClassMethods.

