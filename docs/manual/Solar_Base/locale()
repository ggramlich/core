This is a convenience method that loads locale strings for the class, and returns those strings based on the translation key.  Related reading includes [Main::LocaleFiles locale files] and the [Solar_Locale::HomePage Solar_Locale class].

If you request a key that does not exist in the class-specific locale file, or if there is no locale file for this class and the current locale code, this method will fall back to the system-wide Solar locale strings found in the \\Solar/Locale/*\\ directory.  If, after all that searching, the key has no translation, this method will return the key itself as the translation.

++ Examples

+++ The Hard Way

The longhand way of doing localization, using only the Solar arch-class, looks something like this:

<code type="php">
require_once 'Solar.php';
Solar::start();

// load the translation file for the 'Example' class
// based on the current locale code
Solar::shared('locale')->load('Example', '/path/to/files/Locale/');

// get a translation for the ERR_EXAMPLE key
$string = Solar::locale('Example', 'ERR_EXAMPLE');
</code>

If you change locale codes, you need to re-load the strings:

<code type="php">
// change locale codes to Espanol
Solar::shared('locale')->setCode('es_ES');

// this string will be blank because the es_ES strings have not
// been loaded yet
$string = Solar::locale('Example', 'ERR_EXAMPLE');

// need to reload strings for the current locale
Solar::shared('locale')->load('Example', '/path/to/files/Locale/');

// now we'll get a translation for the ERR_EXAMPLE key
$string = Solar::locale('Example', 'ERR_EXAMPLE');
</code>

+++ The Easy Way

The Solar_Base::locale() method does all the above work for you.

First, you need to have defined $_config['locale'] as the path to your locale files.

<code type="php">
class Example extends Solar_Base {
    protected $_config = array(
        'locale' => '/path/to/files/Locale/'
    );
}
</code>

Now you can use the Solar_Base::locale() method.

<code type="php">
require_once 'Solar.php';
Solar::start();

$example = Solar::factory('Example');
$string = $example->locale('ERR_EXAMPLE');
</code>

If you change locale codes, the method will automatically reload strings for the new code on your next call to locale().

<code type="php">
require_once 'Solar.php';
Solar::start();

$example = Solar::factory('Example');

// get the default translation
$string = $example->locale('ERR_EXAMPLE');

// change the code and get another translation
Solar::shared('locale')->setCode('es_ES');
$string = $example->locale('ERR_EXAMPLE');
</code>

Finally, if the requested key does not exist in the class-specific locale file, this method will "fall back" to the all-purpose Solar locale file, generally located in \\Solar/Locale/*\\, and look for the translation key there.

+++ Singular/Plural

The call to locale() takes an optional second parameter indicating a number to associate with the translation.  If the number is 1, a singular version of the translation will be returned; if the number is more or less than exactly 1, a plural version of the translation (if it exists) will be returned.  See more on defining plurals in the [Main::LocaleFiles locale files] documentation.

<code type="php">
require_once 'Solar.php';
Solar::start();

$example = Solar::factory('Example');

// get singular translations
$string = $example->locale('ERR_EXAMPLE');
$string = $example->locale('ERR_EXAMPLE', 1);

// get plural translations
$string = $example->locale('ERR_EXAMPLE', 0);
$string = $example->locale('ERR_EXAMPLE', 0.5);
$string = $example->locale('ERR_EXAMPLE', 1.1);
$string = $example->locale('ERR_EXAMPLE', 999);
</code>