====================
Getting Started
====================

In general, the basic form cycle goes like this:

1. Create a form object

2. Add elements to the form object, including:

    * The element description (name, type, etc)

    * Filters to apply to the user input for this element

    * Validation to perform on the user input

3. Populate the form with user input

4. Validate the user input in the form

5. Retrieve the validated input and perform further actions (save to a
   database, etc)


--------------------
Step By Step
--------------------

Let's start with a very simple example form, one that asks for one piece
of input: an email address. We'll also need a submit button called
"Save".

Create the Form Object
====================

First, we create the form object itself:

{{code: php
    require_once 'Solar.php';
    Solar::start();

    $form = Solar::factory('Solar_Form', $config);
}}

Set Elements
====================

As it stands now, the form has no elements. We want to set a "text"
element named 'user_email' that uses a label of "Email Address:".

{{code: php
    $info = array(
      'type'  => 'text',
      'label' => 'Email Address:'
    );

    $form->setElement('user_email', $info);
}}

Instant Feedback: Display the Form
====================

Just to show we're on the right track, let's display the form output.
(This doesn't populate the values or validate the input, it just
displays for now.)

We need to use [[Solar_View::HomePage | Solar_View]] and its related
[[Solar_View_Helper_Form::HomePage | form helper]]. This is because
Solar_Form does not perform output functions, only collection and
processing.

Here is a combined controller and view extended from the earlier code.
(Normally you would separate your controller and view, but this example
is about instant feedback.)


{{code: php
    // Start Solar
    require_once 'Solar.php';
    Solar::start();

    // Create a Form object
    $form = Solar::factory('Solar_Form');

    // Set the "user_email" element
    $info = array(
      'type'  => 'text',
      'label' => 'Email Address:'
    );
    $form->setElement('user_email', $info);

    // Set a "Save" submit button called "submit"
    $info = array(
      'type'  => 'submit',
      'label' => 'Action:',
      'value' => 'Save',

    );
    $form->setElement('submit', $info);

    // Create a view object and output the form
    // using the form() helper
    $view = Solar::factory('Solar_View');
    echo $view->form($form);
}}

The output will look something like this; note that the form helper uses
semantic markup, and can by styled using CSS.

{{code: html
    <form action="/test/index.php" method="post" enctype="multipart/form-data">
        <dl>
            <dt><label for="user_email">Email Address:</label></dt>
            <dd><input type="text" id="user_email" name="user_email" value="" /></dd>
        
            <dt><label for="submit">Action:</label></dt>
            <dd><input type="submit" id="submit" name="submit" value="Save" />
        </dl>
    </form>
}}

Populating Values
====================

If you want to provide a default value, just put it in the 'value' key
for that element, like so:

{{code: php
    $info = array(
      'type'  => 'text',
      'label' => 'Email Address:',
      'value' => 'nobody@example.com',
    );

    $form->setElement('user_email', $info);
}}

However, we'd like to automatically override the defaults with submitted
values. Let's extend the script so that it adds user input from POST
submissions. This is very easy to do: just add a
[[Solar_Form::populate()]] call before displaying the form.

{{code: php
    // ... start Solar, create the form object, set elements,
    // and then:

    $form->populate();

    // ... create a Solar_View object, assign, and display.
}}

The [[Solar_Form::populate()]] method will look for the
$_POST['user_email'] array value and put it into the $form object for
you. If the user entered "nobody@example.com" as the address, the view
script would display something like this:

{{code: html
    <!-- ... -->
    <dt><label for="user_email">Email Address:</label></dt>
    <dd><input type="text" id="user_email" name="user_email" value="nobody@example.com" />
    <!-- ... -->
}}

(Technically, the form will use [[Solar::post()]] to get the values
instead of pulling directly from $_POST.)


Validation
====================

What if the user enters something besides an email address? It would be
nice if we could get display a message if the data is not valid. We can
do so using the [[Solar_Form::validate()]] method.

First, we need to add a validation rule on the 'user_email' element.
This just tells the form what method to use for validation; it does not
perform the validation just yet.

{{code: php
    // Set the "user_email" element
    $info = array(
        'type'  => 'text',
        'label' => 'Email Address:',
    );
    $form->setElement('user_email', $info);

    // add a validation rule
    $form->addValid(
        'user_email', 'email',
        'Please enter a valid email address.'
    );
}}

Then, after populating the form object with data, call the
[[Solar_Form::validate()]] method.

{{code: php
    // ... start Solar, create the form object, set elements,
    // and then:

    $form->populate();
    $form->validate();

    // ... create a Solar_View object, assign, and display.
}}

Invalid user input (e.g., entering "not really email") will generate the
following output. The feedback messages are added automatically when
[[Solar_Form::validate()]] is called.

{{code: html
    <!-- ... -->
    <form action="/test/index.php" method="post" enctype="multipart/form-data">
        <ul class="failure">
            <li>Please correct the noted errors.<li>
        </ul>
        <dl>
            <dt><label for="user_email">Email Address:</label></dt>
            <dd>
                <input type="text" id="user_email" name="user_email" value="not really email" />
                <ul>
                    <li>Please enter a valid email address.</li>
                </ul>
            </dd>
        
            <dt><label for="submit">Action:</label></dt>
            <dd><input type="submit" id="submit" name="submit" value="Save" />
        </dl>
    </form>
  <!-- ... -->
}}

If the user input is valid, when you display the form, the list-block
above will be ...

{{code: html
    <!-- ... -->
    <ul class="success">
        <li>Saved.</li>
    </ul>
}}

The different "success" and "failure" CSS classes allow you to style
feedback messages appropriately.


Filters
====================

Sometimes we will want to pre-process the user input before validating
it. What if the user had extra spaces in the email address? Those spaces
will confuse the validation, even though it looks (to the user) like a
valid address. For these and other cases, you can add a 'filter' key to
an element to indicate that the user input should be passed through a
[[Solar_Filter::HomePage | Solar_Filter]] method, removing anything that
doesn't pass the filter.

For example, to filter out all blanks from the user input before
validation, you can add this filter:

{{code: php
    // Set the "user_email" element
    $info = array(
        'type'  => 'text',
        'label' => 'Email Address:',
    );

    // set the element
    $form->setElement('user_email', $info);

    // add a validation rule
    $form->addValid(
        'user_email', 'email',
        'Please enter a valid email address.'
    );

    // add a pre-filter
    $form->addFilter('user_email', 'blank');
}}

All filters are applied as part of the [[Solar_Form::validate()]] method
automatically, just before the validation itself occurs.


Retrieving Values
====================

Now that you have accepted the form, and filtered and validated the user
input it contains, you will want to pull the values out of the form and
do something with them. You do this with the [[Solar_Form::values()]]
method.

{{code: php
    // ... start Solar, create the form object, set elements,
    // and then:

    // populate the form with user input
    $form->populate();

    // what was the submission request?
    $submit = Solar::post('submit'); 

    // process a 'Save' submission
    if ($submit == 'Save') {
    
        if ($form->validate();) {
            $values = $form->values();
            // then insert $values['user_email'] into a database,
            // or forward on to another page, or whatever.
        }
    }
}}

Note the the array returned by [[Solar_Form::values()]] will match the
structure of the $_POST array for the form elements, so if you had
sub-arrays in the form, you will get sub-arrays from
[[Solar_Form::values()]]. Wise use of array key names will help you keep
track of what information goes in which table, and so on.