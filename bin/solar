#!/usr/bin/env php
<?php
// make sure we have an include-path
if (! empty($_SERVER['PHP_SOLAR_INSTALL_DIR'])) {
    
    // the solar-specific install dir
    $include_path = $_SERVER['PHP_SOLAR_INSTALL_DIR'];
    
} elseif (! empty($_SERVER['PHP_PEAR_INSTALL_DIR'])) {
    
    // the general-purpose pear dir
    $include_path = $_SERVER['PHP_PEAR_INSTALL_DIR'];
    
} else {
    
    // can't find either one, fail and exit
    echo "Please define 'PHP_SOLAR_INSTALL_DIR' or 'PHP_PEAR_INSTALL_DIR' in your shell.\n",
         "In bash, the command looks something like this:\n",
         "    bash-2.05\$ export PHP_SOLAR_INSTALL_DIR=/usr/share/pear/php\n",
         "This will let the Solar command find its libraries.\n";
    exit(1);
    
}

// set the include path and try to load the Solar base class
set_include_path($include_path);
require 'Solar.php';
if (! class_exists('Solar', false)) {
    echo "Could not load the Solar class using this include_path:\n",
         $include_path;
    exit(-1);
}

// we can get started now
// @todo Use PHP_SOLAR_CONFIG_FILE here
Solar::start(false);

// register a request environment object for the controllers
Solar::register('request', 'Solar_Request');

// create a console controller
$console = Solar::factory('Solar_Controller_Console', array(
    'classes' => 'Solar_Cli',
    'default' => 'base',
));

// invoke the command passed from the command line
try {
    $console->exec();
    exit(0);
} catch (Solar_Exception $e) {
    
    // print the error message
    echo $e->getMessage() . "\n";
    
    // find the exit code, if any.  default code is -1.
    $info = $e->getInfo();
    if (array_key_exists('exit', $info)) {
        $exit = (int) $info['exit'];
        if (! $exit) {
            $exit = -1;
        }
    } else {
        $exit = -1;
    }
    
    // done!
    exit($exit);
}
