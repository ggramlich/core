#!/usr/bin/env php
<?php
/**
 * Error reporting turned way up
 */
error_reporting(E_ALL | E_STRICT);
ini_set('display_errors', true);
ini_set('html_errors', false);

/**
 * Discover and set the include-path
 */
if (! empty($_SERVER['PHP_SOLAR_INSTALL_DIR'])) {
    // the solar-specific install dir
    set_include_path($_SERVER['PHP_SOLAR_INSTALL_DIR']);
} elseif (! empty($_SERVER['PHP_PEAR_INSTALL_DIR'])) {
    // the general-purpose pear dir
    set_include_path($_SERVER['PHP_PEAR_INSTALL_DIR']);
}

/**
 * Can we find the Solar arch-class?
 */
include 'Solar.php';
if (! class_exists('Solar')) {
    echo "Could not load the file 'Solar.php' from the include_path:\n";
    echo get_include_path();
    exit(-1);
}

/**
 * Find the config file, if any
 */

// default config file
if (! empty($_SERVER['PHP_SOLAR_CONFIG_PATH'])) {
    $config = $_SERVER['PHP_SOLAR_CONFIG_PATH'];
} else {
    $config = false;
}

// manually look for a --config (config file) argument
$argv = empty($_SERVER['argv']) ? array() : $_SERVER['argv'];
$found = false;
foreach ($argv as $val) {
    if ($val == '--config') {
        // found the argument
        $found = true;
        // reset the default in preparation for the next argument
        $config = false;
        continue;
    }
    
    if ($found && substr($val, 0, 1) != '-') {
        $config = $val;
        break;
    }
    
    if (substr($val, 0, 9) == '--config=') {
        $found = true;
        $config = substr($val, 9);
        break;
    }
}

// if there was a --config but no param, that's a failure
if ($found && ! $config) {
    echo "Please specify a config file path after the --config option.\n";
    exit(-1);
}

// was there a config file at all?
if ($config) {
    $config = realpath($config);
    echo "Using config file '$config'.\n";
} else {
    echo "Not using a config file.\n";
}

/**
 * Find the "vendor" (top-level class name)
 */

// the command used to invoke this script
// e.g., '/usr/local/bin/foo'
$cmd = $_SERVER['argv'][0];

// get the last part of the command.
// e.g., '/usr/local/bin/foo' => 'foo'
$path = explode(DIRECTORY_SEPARATOR, $cmd);
$vendor = end($path);

// change to a class name prefix set.
// 'foo' => 'Foo'
// 'foo-bar' => 'FooBar'
// 'foo_bar' => 'FooBar'
$vendor = str_replace(array('-', '_'), ' ', $vendor);
$vendor = ucwords($vendor);
$vendor = str_replace(' ', '', $vendor);

/**
 * Main
 */

// Start Solar with the requested config file (if any)
Solar::start($config);

// create a console controller using the Vendor_Cli classes
$console = Solar::factory('Solar_Controller_Console', array(
    'classes' => "{$vendor}_Cli",
    'default' => "base",
));

// execute the requested command
try {
    $console->exec();
    exit(0);
} catch (Exception $e) {
    
    // find an exit code, if any
    $exit = false;
    if ($e instanceof Solar_Exception) {
        $info = $e->getInfo();
        if (array_key_exists('exit', $info)) {
            $exit = (int) $info['exit'];
        }
    }
    
    // disallow empty or zero exit codes
    if (! $exit) {
        $exit = -1;
    }
    
    // print the error message and exit
    echo $e . "\n";
    exit($exit);
}
